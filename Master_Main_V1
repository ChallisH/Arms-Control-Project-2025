import warnings
import lmfit
import becquerel as bq
import SpecUtils
import math
import numpy as np
import scipy
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
from scipy.stats import norm
from typing import Any



"""
==============================================================================================
Input Spectra and Extract Information
==============================================================================================
"""

def load_spectra(path_to_spectra: str) -> SpecUtils.SpecFile():
    """
    Loads spectrum file automatically for a given file type.
    SpecUtils.ParserType.Auto will try to automatically determine
    the file extension, so verify you are loading a compatible file"""

    spec_file = SpecUtils.SpecFile()
    try:
        spec_file.loadFile(path_to_spectra, SpecUtils.ParserType.Auto)
        return spec_file

    except RuntimeError as e:
        raise Exception(f"Failed to decode file: {e}")

    return


#=======================================================================================

def parse_title(spectrum_title: str) -> dict[str, Any] | None:
    """
    Parses all the information in my (Tanner's) .pcf file titles
    and loads it into a dictionary.

    A few notes:
        1. There is a bit of information here not useful for the
           arm control information barriers project but is here
           because of another project. You will not need things like
           nps, U235 content, etc.
        2. Pu239, Pu240, and other isotopics are weight fractions
           are represented as NEGATIVE NUMBERS and you might want to
           switch them back to positive.
        3. det_max_erg is in MeV, but its more common to use keV.
        4. PuRatio is just the ratio of Pu240/Pu239 and is positive
           already since, yknow, negative divided by a negative.
        5. NPS is a relic. Ignore, as it makes no sense in this context.
        6. Titles are unique to the person/software that generated the
           spectrum. If/when you use another detector or input a spectrum
           I did not provide, the title will be different and this function
           will not work.

    Args:
        spectrum_title: spectrum title as string

    Returns:
        Dictionary containing what the spectrum represents
    """
    
    parts = spectrum_title.split("_")
    
    #Allows for the parsing of Tanners metadata in the titles of the files
    
    if len(parts) != 20:
        print(f"Note: Unexpected title format, skipping metadata parsing. Title: '{spectrum_title}'")
        return {
        "snm":	'none found', "U232": 'none found', "U235": 'none found', "U238": 'none found', "Pu239": 'none found',
        "Pu240":'none found', "Pu241": 'none found', "PuRatio": 'none found', "age": 'none found',
        "snmir": 'none found', "snmor": 'none found', "U_mass":'none found', "Pu_mass": 'none found',
        "shd_mat": 'none found', "shdor": 'none found', "det_type": 'none found', "det_dist": 'none found',
        "det_bins":'none found', "det_max_erg": 'none found', "nps": 'none found'
        }

    snm, U232, U235, U238, Pu239, Pu240, Pu241, PuRatio, age, snmir, snmor, \
    U_mass, Pu_mass, shd_mat, shdor, det_type, det_dist, det_bins, det_max_erg, \
    nps = parts

    return {
        "snm":	snm, "U232": float(U232), "U235": float(U235), "U238": float(U238), "Pu239": float(Pu239),
        "Pu240": float(Pu240), "Pu241": float(Pu241), "PuRatio": float(PuRatio), "age": int(age),
        "snmir": float(snmir), "snmor": float(snmor), "U_mass": float(U_mass), "Pu_mass": float(Pu_mass),
        "shd_mat": shd_mat, "shdor": float(shdor), "det_type": det_type, "det_dist": float(det_dist),
        "det_bins": int(det_bins), "det_max_erg": float(det_max_erg), "nps": nps }


#=======================================================================================================
        
def spectra_data(pcf_file: str,
                 energy_min=600,
                 energy_max=700,
                 loud=0):
    """
    Extracts energy bin centers, counts, uncertainties, troughs, and peaks for a selected spectrum
    within a specified energy range (default: 600–700 keV).
    
    Selection Criteria for edge case test sorting (small Pu240 peak):
        - Pu_mass must equal 6000
        - PuRatio must be less than 0.04

    Returns:
        energy (np.ndarray): Energy bin centers within the range
        counts (np.ndarray): Gamma counts in each bin
        uncert (np.ndarray): sqrt(counts) uncertainty in each bin
    """
    spectra = load_spectra(pcf_file)

    for i in range(spectra.numMeasurements()):
        spectrum = spectra.measurement(i)
        info = parse_title(spectrum.title())
        livetime = spectrum.liveTime()
        realtime = spectrum.realTime()
        deadtime_frac = 1 - livetime / realtime

        # Apply filtering criteria
        if float(info["Pu_mass"]) != 6000 or float(info["PuRatio"]) >= 0.04:
            continue

       # Extract true bin‑centers (not just left edges), counts, and uncertainties
        edges  = np.array(spectrum.channelEnergies())      # length N+1
        energy = 0.5 * (edges[:-1] + edges[1:])            # length N: bin centers
        counts = np.array(spectrum.gammaCounts())          # length N
        uncert = np.sqrt(counts)
        uncert[counts == 0] = 1.0  # Replace zero uncertainties

        # Energy window mask
        mask = (energy >= energy_min) & (energy <= energy_max)
        
        x_min, x_max = min(energy[mask]), max(energy[mask])
        num_ticks = 10
        xticks = np.linspace(x_min, x_max, num_ticks)

        # --- Peak Finding ---
        peaks, properties = find_peaks(counts[mask], height=1)  # Adjust height as needed

        # --- Trough Finding (by inverting the signal) ---
        troughs, trough_props = find_peaks(-counts[mask])

        filteredEnergy = energy[mask]
        filteredCounts = counts[mask]

        peak_data = []
        for idx in peaks:
            peak_energy = filteredEnergy[idx]
            peak_count = filteredCounts[idx]
            peak_data.append({'energy_keV': peak_energy, 'counts': peak_count})

        trough_data = []
        for idx in troughs:
            trough_energy = filteredEnergy[idx]
            trough_count = filteredCounts[idx]
            trough_data.append({'energy_keV': trough_energy, 'counts': trough_count})

        if loud:
            print("Detected Peaks (Energy [keV], Counts):")
            for p in peak_data:
                print(f"  {p['energy_keV']:.2f} keV : {int(p['counts'])} counts")
                
            print("Detected Troughs (Energy [keV], Counts):")
            for t in trough_data:
                print(f"  {t['energy_keV']:.2f} keV : {int(t['counts'])} counts")

            break

    return energy[mask], counts[mask], uncert[mask], peak_data, trough_data


    raise ValueError("No matching WGPu spectrum found with Pu_mass=6000 and PuRatio<0.04.")


"""
==============================================================================================
Bequerel Gausian Fit to RoI (most accurate?)
==============================================================================================
"""

#=================================================================================================================
def singleGauss(x, y, y_unc, loud=0):
    """
    Fit one Gaussian+linear background to the data in x/y with uncertainties y_unc.
    If becquerel’s built‑in guess chokes on an empty guess window, fall back
    to a crude estimate (peak height, bin width/6 for sigma).
    """
    g   = bq.fitting.GaussModel(prefix="g_")
    lin = bq.fitting.LineModel(prefix="bkg_")
    model = g + lin

    try:
        fitter = bq.Fitter(model, x=x, y=y, y_unc=y_unc, roi=(x.min(), x.max()))
    except ValueError:
        # fallback guess
        peak_idx = np.argmax(y)
        mu0   = x[peak_idx]
        sigma0= (x.max() - x.min()) / 6
        amp0  = y[peak_idx]
        if loud:
            print("  [singleGauss] guess failed, using fallback:", amp0, mu0, sigma0)
        return amp0, mu0, sigma0

    # ---- if we got here, the guess succeeded ----
    peak_idx = np.argmax(y)
    fitter.params["g_mu"].set(    value=x[peak_idx])
    fitter.params["g_sigma"].set( value=(x.max() - x.min())/6, min=0)
    fitter.params["g_amp"].set(   value=y[peak_idx], min=0)

    fitter.fit()
    if loud:
        plt.figure()           # ← NEW FIGURE HERE
        fitter.custom_plot()   # draws on the fresh figure
        plt.tight_layout()
        plt.show()

    amp   = fitter.result.params["g_amp"].value
    mu    = fitter.result.params["g_mu"].value
    sigma = fitter.result.params["g_sigma"].value
    return amp, mu, sigma



#===================================================================================================================================
def multGauss(xEnergy , yCounts , yUnc , peakTargets , troughTargets, loud = 0):

    '''
    Inputs: xEnergy - energy bins of interest
            yCounts - Counts for energy bins of interest
            yUnc - sqrt of yCounts (uncertainty in counts)
            peakTargets - known values of isotopes to be analyzed
            troughTargets - border values around the peak cluster of interest
            
    Returns: gaussPeakEnergy - energies of the peaks of interest
            gaussPeakCounts - Counts for the peaks of interest
            tXVals - energies of the border values
            tYVals - counts of the border values

    NOTE: For use in the  ~635.07-643kev region when the Pu-240 peak is not well defined.
    '''

    peakVars , troughVars = peakVals(xEnergy , yCounts) , peakVals(xEnergy , yCounts)

    peakEnergy , peakCounts = peakVars[0] , peakVars[1]

    PP = nearestPeak(peakTargets , peakVars[0] , peakVars[1])

    TP = nearestPeak(troughTargets , troughVars[0] , troughVars[1])

    xVals , yVals = PP[0] , PP[1]

    tXVals , tYVals = TP[0] , TP[1]

    gaussPeakEnergy = []

    gaussPeakCounts = []

    for i in range(len(peakEnergy)):

        if tXVals[0] <= peakEnergy[i] <= tXVals[1]:

            gaussPeakEnergy.append(peakEnergy[i])

            gaussPeakCounts.append(peakCounts[i])

    gaussPeakEnergy = np.array(gaussPeakEnergy)

    gaussPeakCounts = np.array(gaussPeakCounts)

    width = (tXVals[1] - tXVals[0])/4

    model = (
        bq.fitting.GaussModel(prefix="gauss0_")
        + bq.fitting.GaussModel(prefix="gauss1_")
        + bq.fitting.GaussModel(prefix="gauss2_")
        + bq.fitting.GaussModel(prefix="gauss3_")
        + lmfit.models.LinearModel(prefix="line_")
    )
            
    params = {
        "gauss0_amp": gaussPeakCounts[0],
        "gauss0_mu": gaussPeakEnergy[0],
        "gauss0_sigma": width,
        "gauss1_amp": gaussPeakCounts[1],
        "gauss1_mu": gaussPeakEnergy[1],
        "gauss1_sigma": width,
        "gauss2_amp": gaussPeakCounts[2],
        "gauss2_mu": gaussPeakEnergy[2],
        "gauss2_sigma": width,
        "gauss3_amp": gaussPeakCounts[3],
        "gauss3_mu": gaussPeakEnergy[3],
        "gauss3_sigma": width,
        "line_slope": (tYVals[1]-tYVals[0])/(tXVals[1]-tXVals[0]),
        "line_intercept": tYVals[0] - ((tYVals[1]-tYVals[0])/(tXVals[1]-tXVals[0])) * tXVals[0],
    }
            
    fitter = bq.Fitter(
        model,
        x = xEnergy ,
        y = yCounts,
        y_unc = yUnc,
        roi=(tXVals[0] , tXVals[1]),
    )
   
        
    fitter.params["gauss0_mu"].set(value=gaussPeakEnergy[0])
    fitter.params["gauss1_mu"].set(value=gaussPeakEnergy[1])
    fitter.params["gauss2_mu"].set(value=gaussPeakEnergy[2])
    fitter.params["gauss3_mu"].set(value=gaussPeakEnergy[3])
    fitter.fit()
    if loud:
        fitter.custom_plot()
        plt.tight_layout()
        plt.show()

    return gaussPeakEnergy , gaussPeakCounts , tXVals , tYVals


"""
==============================================================================================
MGA 
==============================================================================================
"""


"""
==============================================================================================
Plotting 
==============================================================================================
"""
import numpy as np
import matplotlib.pyplot as plt

def plot_specutils_spectrum(
    spec,
    energy_range=None,
    peaks=None,
    troughs=None,
    ref_lines=None,
    title=None
):
    """
    Plot a SpecUtils spectrum with optional annotations.

    Args:
        spec:         A SpecUtils measurement (e.g. spec = spectra.measurement(0))
        energy_range: (emin, emax) to zoom in on a subsection
        peaks:        list of (energy, label) tuples to mark with 'x'
        troughs:      list of (energy, label) tuples to mark with 'o'
        ref_lines:    dict of label→energy to draw vertical dashed lines
        title:        Optional plot title
    """
    # Build bin centers & counts
    edges   = np.array(spec.channelEnergies())
    centers = 0.5 * (edges[:-1] + edges[1:])
    counts  = np.array(spec.gammaCounts())[:-1]

    fig, ax = plt.subplots(figsize=(10, 4), constrained_layout=True)

    # 1) Plot the spectrum
    ax.step(centers, counts, where="mid", color="navy", label="Counts")

    # 2) Zoom if requested
    if energy_range:
        ax.set_xlim(*energy_range)

    # 3) Mark detected peaks
    if peaks:
        pe = np.array([e for e, _ in peaks])
        pc = np.interp(pe, centers, counts)
        ax.scatter(pe, pc, marker="x", s=80, color="red", label="Detected peaks")
        for e, lbl in peaks:
            ax.text(e, np.interp(e, centers, counts) * 1.05,
                    lbl, ha="center", color="red", fontsize="small")

    # 4) Mark detected troughs
    if troughs:
        te = np.array([e for e, _ in troughs])
        tc = np.interp(te, centers, counts)
        ax.scatter(te, tc, marker="o", s=60, color="green", label="Detected troughs")
        for e, lbl in troughs:
            ax.text(e, np.interp(e, centers, counts) * 0.90,
                    lbl, ha="center", color="green", fontsize="small")

    # 5) Draw reference lines
    if ref_lines:
        for lbl, e in ref_lines.items():
            ax.axvline(e, color="orange", linestyle="--", label=lbl)

    # 6) Labels, grid, legend
    ax.set_xlabel("Energy (keV)", fontsize="medium")
    ax.set_ylabel("Counts", fontsize="medium")
    if title:
        ax.set_title(title, fontsize="large")
    ax.grid(True, ls=":")
    ax.legend(loc="upper left", bbox_to_anchor=(1.02, 1), fontsize="small")

    plt.show()


"""
==============================================================================================
Master Main
==============================================================================================
"""

def master_main(pcf_file: str, loud=0):
    # 1) Extract the zoomed spectrum data
    energies, counts, uncertainties, peak_data, trough_data = spectra_data(pcf_file, loud=loud)

    # 2) Parse metadata (to get the title ratio)
    spec_file = load_spectra(pcf_file)
    spec0     = spec_file.measurement(0)
    info      = parse_title(spec0.title())
    title_ratio = info["PuRatio"]
    mass = info["Pu_mass"]
    shield = info["shd_mat"]
    distance = info["det_dist"]
    # 3) Define the three peaks of interest
    ref_peaks = {
        "Pu240":     642.48,
        "Pu239_low": 645.97,
        "Pu239_high":658.929
    }

    areas = {}
    HALF_WINDOW_KEV = 2.0  # fallback half‐width in keV

    # 4) Search global troughs once (invert counts)
    trough_idxs, _ = find_peaks(-counts)

    # 5) Loop over each isotope
    for i, (peak_name, E_ref) in enumerate(ref_peaks.items(), start=1):
        # 5a) Find all peaks in the spectrum
        all_peaks, _ = find_peaks(counts)
        if all_peaks.size == 0:
            idx = None
        else:
            # pick the detected peak closest to the reference energy
            idx = all_peaks[np.argmin(np.abs(energies[all_peaks] - E_ref))]

        # 5b) Handle missing Pu‐240: placeholder for MGA
        if idx is None and peak_name == "Pu240":
            print("No Pu-240 peak found: invoking MGA placeholder...")
            # --- MGA analysis placeholder ---
            # MGA(pcf_file)
            return None
        elif idx is None:
            areas[peak_name] = 0.0
            continue

        # 5c) Find left/right trough around this peak
        left_cand  = trough_idxs[trough_idxs < idx]
        right_cand = trough_idxs[trough_idxs > idx]
        if left_cand.size and right_cand.size:
            lo, hi = left_cand.max(), right_cand.min()
        else:
            # fallback to ±HALF_WINDOW_KEV
            lo = np.searchsorted(energies, E_ref - HALF_WINDOW_KEV)
            hi = np.searchsorted(energies, E_ref + HALF_WINDOW_KEV)

        # 5d) Guard against too narrow windows
        if hi - lo < 3:
            lo = np.searchsorted(energies, E_ref - HALF_WINDOW_KEV)
            hi = np.searchsorted(energies, E_ref + HALF_WINDOW_KEV)

        # 5e) Slice ROI
        x_roi = energies[lo:hi+1]
        y_roi = counts[lo:hi+1]
        u_roi = uncertainties[lo:hi+1]

        #ROI Check 
        print(E_ref, '-x_roi:', x_roi )
        
        print(E_ref, '-y_roi:', y_roi )

        print(E_ref, '-unc_roi:', u_roi )
        # 5f) Fit Gaussian + linear background
        amp, mu, sigma = singleGauss(x_roi, y_roi, u_roi, loud=loud)
        areas[peak_name] = amp * sigma * np.sqrt(2 * math.pi)

        if loud:
            print(f"Fitted {peak_name}: ROI {x_roi[0]:.2f}-{x_roi[-1]:.2f} keV -> area = {areas[peak_name]:.1f}")
    # 6) Compute ratio Pu240 / (Pu239_low + Pu239_high)
    denom = areas.get("Pu239_low", 0) + areas.get("Pu239_high", 0)
    pu_ratio_calc = areas["Pu240"] / denom if denom > 0 else float('inf')

    # 7) Report and return
    print("==============================================================================================")
    print(f'{100 * title_ratio:.2f}% Pu240, {mass}g of Pu, Shielding: {shield}, {distance}cm from source')
    print("==============================================================================================")
    print(f"Computed Pu-240/239 ratio: {pu_ratio_calc:.4f}")
    print(f"Title Pu-240/239 ratio: {title_ratio:.4f}")
    pct_err = abs(pu_ratio_calc - title_ratio)/title_ratio * 100 if title_ratio else None
    if pct_err is not None:
        print(f"Percent error: {pct_err:.2f}%")
    return pu_ratio_calc, title_ratio, pct_err





    
#Test

file1 = r"C:\Users\jrtes\Downloads\Pu_Bare_Det60cm_HPGe_CPS_tally98.pcf"
master_main(file1, 1)

"""

energies, counts, uncertainties, peak_data, trough_data = spectra_data(file1, loud=1)

energy_min, energy_max = 656.30, 661.42
mask = (energies >= energy_min) & (energies <= energy_max)

roi_energies     = energies[mask]
roi_counts       = counts[mask]
roi_uncertainties= uncertainties[mask]

singleGauss(roi_energies, roi_counts, roi_uncertainties, loud=1)
"""
